/* auto-generated by NAPI-RS */
/* eslint-disable */
/** AI 分析配置选项 */
export interface AiAnalysisOptions {
  /** 模型路径 */
  modelPath?: string
  /** 置信度阈值 (0.0-1.0) */
  confidenceThreshold?: number
  /** 最大标签数量 */
  maxTags?: number
  /** 是否启用颜色分析 */
  analyzeColors?: boolean
  /** 是否启用对象检测 */
  detectObjects?: boolean
}

/** AI 分析结果 */
export interface AiAnalysisResult {
  /** 分析是否成功 */
  success: boolean
  /** 图片类型 */
  imageType: string
  /** 标签 JSON string */
  tagsJson: string
  /** 图片描述 */
  description: string
  /** 置信度 */
  confidence: number
  /** 检测到的对象 JSON string */
  objectsJson: string
  /** 主要颜色 JSON string */
  colorsJson: string
  /** 场景类型 */
  sceneType: string
  /** 分析耗时（毫秒） */
  analysisTime: number
  /** 使用的模型 */
  modelUsed: string
  /** 图片信息 JSON string */
  imageInfoJson: string
  /** 错误信息 */
  error?: string
}

/** 分析图片（单张） */
export declare function analyzeImage(imageData: Array<number>, options?: AiAnalysisOptions | undefined | null): AiAnalysisResult

/** 批量分析图片 */
export declare function batchAnalyzeImages(imagesData: Array<Array<number>>, options?: AiAnalysisOptions | undefined | null): Array<AiAnalysisResult>

/** 批量压缩图片为WebP格式 */
export declare function batchCompressToWebp(imagesData: Array<Array<number>>, options?: WebPCompressOptions | undefined | null): Array<WebPCompressResult>

/** 批量转换图片格式 */
export declare function batchConvertImageFormat(imagesData: Array<Array<number>>, options: FormatConversionOptions): Array<FormatConversionResult>

/** 检查模型是否可用 */
export declare function checkModelAvailability(modelPath: string): boolean

/** 颜色信息 */
export interface ColorInfo {
  name: string
  rgb: Array<number>
  hex: string
  percentage: number
}

/** 压缩图片为WebP格式 */
export declare function compressToWebp(imageData: Array<number>, options?: WebPCompressOptions | undefined | null): WebPCompressResult

/** 转换图片格式 */
export declare function convertImageFormat(imageData: Array<number>, options: FormatConversionOptions): FormatConversionResult

/** 检测到的对象 */
export interface DetectedObject {
  name: string
  confidence: number
  bbox: string
  category: string
}

/** 格式转换选项 */
export interface FormatConversionOptions {
  /** 目标格式 */
  targetFormat: string
  /** 压缩质量 (1-100) */
  quality?: number
  /** 是否保持透明度 */
  preserveTransparency?: boolean
  /** 是否无损转换 */
  lossless?: boolean
  /** 颜色空间 */
  colorSpace?: string
  /** 尺寸调整选项 */
  resize?: ResizeOptions
}

/** 格式转换结果 */
export interface FormatConversionResult {
  /** 转换后的数据 */
  data: Array<number>
  /** 原始大小 */
  originalSize: number
  /** 转换后大小 */
  convertedSize: number
  /** 转换后宽度 */
  width: number
  /** 转换后高度 */
  height: number
  /** 原始宽度 */
  originalWidth: number
  /** 原始高度 */
  originalHeight: number
  /** 转换时间 (毫秒) */
  conversionTime: number
}

/** 获取格式的详细信息 */
export declare function getFormatInfo(formatStr: string): string

/** 获取图片信息 */
export declare function getImageInfo(imageData: Array<number>): string

/** 获取支持的图片格式列表 */
export declare function getSupportedFormats(): Array<string>

/** 图片信息 */
export interface ImageInfo {
  width: number
  height: number
  aspectRatio: number
}

/** 简单的加法函数，用于测试WASM接口 */
export declare function plus100(input: number): number

/** 尺寸调整选项 */
export interface ResizeOptions {
  /** 目标宽度 */
  width?: number
  /** 目标高度 */
  height?: number
  /** 是否保持宽高比 */
  maintainAspectRatio?: boolean
}

/** WebP压缩配置 */
export interface WebPCompressOptions {
  /** 压缩质量 (0-100) */
  quality?: number
  /** 是否使用无损压缩 */
  lossless?: boolean
}

/** WebP压缩结果 */
export interface WebPCompressResult {
  /** 压缩后的数据 */
  data: Array<number>
  /** 原始大小 */
  originalSize: number
  /** 压缩后大小 */
  compressedSize: number
  /** 压缩率 (0-1) */
  compressionRatio: number
  /** 压缩后的宽度 */
  width: number
  /** 压缩后的高度 */
  height: number
}
