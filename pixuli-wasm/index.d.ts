/* auto-generated by NAPI-RS */
/* eslint-disable */
/** AI 分析配置 */
export interface AiAnalysisConfig {
  /** 模型类型 */
  modelType: AIModelType
  /** 模型路径（本地模型） */
  modelPath?: string
  /** API 端点（远程模型） */
  apiEndpoint?: string
  /** API 密钥 */
  apiKey?: string
  /** 是否使用 GPU */
  useGpu?: boolean
  /** 置信度阈值 */
  confidenceThreshold?: number
}

/** AI 模型类型 */
export declare const enum AIModelType {
  TensorFlow = 0,
  TensorFlowLite = 1,
  ONNX = 2,
  LocalLLM = 3,
  RemoteAPI = 4
}

/** 分析图片内容（使用 AI 模型） */
export declare function analyzeImageWithAi(imageData: Array<number>, config: AiAnalysisConfig): ImageAnalysisResult

/** 使用 TensorFlow 模型分析图片 */
export declare function analyzeImageWithTensorflow(imageData: Array<number>, modelPath: string): ImageAnalysisResult

/** 使用 TensorFlow Lite 模型分析图片 */
export declare function analyzeImageWithTensorflowLite(imageData: Array<number>, modelPath: string): ImageAnalysisResult

/** 批量分析图片 */
export declare function batchAnalyzeImagesWithAi(imagesData: Array<Array<number>>, config: AiAnalysisConfig): Array<ImageAnalysisResult>

/** 批量压缩图片为WebP格式 */
export declare function batchCompressToWebp(imagesData: Array<Array<number>>, options?: WebPCompressOptions | undefined | null): Array<WebPCompressResult>

/** 批量转换图片格式 */
export declare function batchConvertImageFormat(imagesData: Array<Array<number>>, options: FormatConversionOptions): Array<FormatConversionResult>

/** 边界框 */
export interface BoundingBox {
  /** X坐标 */
  x: number
  /** Y坐标 */
  y: number
  /** 宽度 */
  width: number
  /** 高度 */
  height: number
}

/** 检查模型是否可用 */
export declare function checkModelAvailability(modelPath: string): boolean

/** 颜色信息 */
export interface ColorInfo {
  /** 颜色名称 */
  name: string
  /** RGB值 */
  rgb: [number, number, number]
  /** 占比 */
  percentage: number
  /** 十六进制值 */
  hex: string
}

/** 压缩图片为WebP格式 */
export declare function compressToWebp(imageData: Array<number>, options?: WebPCompressOptions | undefined | null): WebPCompressResult

/** 转换图片格式 */
export declare function convertImageFormat(imageData: Array<number>, options: FormatConversionOptions): FormatConversionResult

/** 检测到的物体 */
export interface DetectedObject {
  /** 物体名称 */
  name: string
  /** 置信度 (0-1) */
  confidence: number
  /** 边界框 */
  bbox: BoundingBox
  /** 类别 */
  category: string
}

/** 下载 TensorFlow 模型 */
export declare function downloadTensorflowModel(modelName: string, modelUrl: string): string

export interface FormatConversionOptions {
  targetFormat: string
  quality?: number
  preserveTransparency?: boolean
  lossless?: boolean
  colorSpace?: string
  resize?: ResizeOptions
}

export interface FormatConversionResult {
  data: Array<number>
  originalSize: number
  convertedSize: number
  width: number
  height: number
  originalWidth: number
  originalHeight: number
  conversionTime: number
}

/** 获取图片信息 */
export declare function getImageInfo(imageData: Array<number>): string

/** 获取支持的模型列表 */
export declare function getSupportedModels(): Array<string>

/** 图片分析结果 */
export interface ImageAnalysisResult {
  /** 图片类型/格式 */
  imageType: string
  /** 标签列表 */
  tags: Array<string>
  /** 图片描述 */
  description: string
  /** 置信度 (0-1) */
  confidence: number
  /** 检测到的物体 */
  objects: Array<DetectedObject>
  /** 主要颜色 */
  colors: Array<ColorInfo>
  /** 场景类型 */
  sceneType: string
  /** 分析时间（毫秒） */
  analysisTime: number
  /** 使用的模型 */
  modelUsed: string
}

/** 简单的加法函数，用于测试WASM接口 */
export declare function plus100(input: number): number

export interface ResizeOptions {
  width?: number
  height?: number
  maintainAspectRatio?: boolean
}

/** WebP压缩配置 */
export interface WebPCompressOptions {
  /** 压缩质量 (0-100) */
  quality?: number
  /** 是否使用无损压缩 */
  lossless?: boolean
}

/** WebP压缩结果 */
export interface WebPCompressResult {
  /** 压缩后的数据 */
  data: Array<number>
  /** 原始大小 */
  originalSize: number
  /** 压缩后大小 */
  compressedSize: number
  /** 压缩率 (0-1) */
  compressionRatio: number
  /** 压缩后的宽度 */
  width: number
  /** 压缩后的高度 */
  height: number
}
