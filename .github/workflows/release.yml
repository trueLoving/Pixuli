name: 发布 Pixuli

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: '发布版本 (例如: 1.0.0)'
        required: true
        default: '1.0.0'

permissions:
  contents: write
  packages: write

env:
  NODE_VERSION: '22'

jobs:
  build-and-release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]
        include:
          - os: windows-latest
            platform: win
            artifact_name: win
            file_extensions: '.exe'
          # - os: macos-latest
          #   platform: mac
          #   artifact_name: mac
          #   file_extensions: '.dmg,.zip'

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 安装 pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10

      - name: 安装依赖
        run: pnpm install

      - name: 构建应用
        run: pnpm run electron:build
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 提取版本号
        id: version
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            # 从 tag 中提取版本号，移除 'v' 前缀
            VERSION=${GITHUB_REF#refs/tags/}
            VERSION=${VERSION#v}
            echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          fi
          echo "TAG_VERSION=v$VERSION" >> $GITHUB_OUTPUT
          echo "版本号: $VERSION"
          echo "标签版本: v$VERSION"

      - name: 重命名构建产物
        shell: bash
        run: |
          cd release
          # 为每个文件添加版本号前缀
          for file in *; do
            if [ -f "$file" ]; then
              # 提取文件扩展名
              extension="${file##*.}"
              filename="${file%.*}"
              # 创建带版本号的新文件名
              new_name="Pixuli-v${{ steps.version.outputs.VERSION }}-${{ matrix.platform }}-$filename.$extension"
              mv "$file" "$new_name"
              echo "重命名: $file -> $new_name"
            fi
          done

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: pixuli-${{ matrix.artifact_name }}-v${{ steps.version.outputs.VERSION }}
          path: |
            release/*.exe
            !release/*.blockmap
            !release/*.yml
            !release/*.map
          retention-days: 30

  create-release:
    needs: build-and-release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 提取版本号
        id: version
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
            echo "TAG_VERSION=v${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            # 从 tag 中提取版本号，移除 'v' 前缀
            VERSION=${GITHUB_REF#refs/tags/}
            VERSION=${VERSION#v}
            echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
            echo "TAG_VERSION=v$VERSION" >> $GITHUB_OUTPUT
          fi
          echo "版本号: $VERSION"
          echo "标签版本: v$VERSION"

      - name: 下载所有构建产物
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: 创建发布
        id: create_release
        run: |
          # 检查标签是否已存在
          if gh release view ${{ steps.version.outputs.TAG_VERSION }} >/dev/null 2>&1; then
            echo "标签 ${{ steps.version.outputs.TAG_VERSION }} 已存在，跳过创建"
          else
            # 使用 GitHub CLI 创建发布
            gh release create ${{ steps.version.outputs.TAG_VERSION }} \
              --title "Pixuli v${{ steps.version.outputs.VERSION }}" \
              --notes "## 新版本发布 🎉
              
              ### 版本: v${{ steps.version.outputs.VERSION }}
              
              ### 更新内容
              - 修复已知问题
              - 性能优化
              - 新功能添加
              
              ### 下载
              请根据您的操作系统选择相应的安装包：
              
              **Windows**: 下载 .exe 文件
              # **macOS**: 下载 .dmg 或 .zip 文件
              
              ### 构建信息
              - 构建时间: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
              - 提交: ${{ github.sha }}
              - 分支: ${{ github.ref_name }}" \
              --draft=false \
              --prerelease=false
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 上传 Windows 构建产物
        run: |
          # 查找 Windows 构建产物，只上传主要的应用程序文件
          find artifacts/pixuli-win-v${{ steps.version.outputs.VERSION }} -name "*.exe" -type f | while read file; do
            # 过滤掉重复的文件名，只保留带版本号的文件
            if [[ "$(basename "$file")" == *"v${{ steps.version.outputs.VERSION }}"* ]]; then
              echo "上传文件: $file"
              gh release upload ${{ steps.version.outputs.TAG_VERSION }} "$file" --clobber
            else
              echo "跳过重复文件: $file"
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: 上传 macOS DMG 包
      #   run: |
      #     # 查找 macOS DMG 构建产物
      #     find artifacts/pixuli-mac-v${{ steps.version.outputs.VERSION }} -name "*.dmg" -type f | while read file; do
      #       echo "上传文件: $file"
      #       gh release upload ${{ steps.version.outputs.TAG_VERSION }} "$file" --clobber
      #       done
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: 上传 macOS ZIP 包
      #   run: |
      #     # 查找 macOS ZIP 构建产物
      #     find artifacts/pixuli-mac-v${{ steps.version.outputs.VERSION }} -name "*.zip" -type f | while read file; do
      #       echo "上传文件: $file"
      #       gh release upload ${{ steps.version.outputs.TAG_VERSION }} "$file" --clobber
      #       done
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 