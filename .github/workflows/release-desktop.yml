name: 发布 Pixuli Desktop

on:
  workflow_dispatch:
    inputs:
      version:
        description: '发布版本 (例如: 1.0.0)'
        required: true
        default: '1.0.0'
      is-publish:
        description: '是否进行发布操作'
        required: false
        default: 'true'
        type: boolean

permissions:
  contents: write
  packages: write

env:
  NODE_VERSION: '22'

jobs:
  build-and-release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: win
            artifact_name: win
            file_extensions: '.exe'
            arch: x64
          - os: macos-latest
            platform: mac-x64
            artifact_name: mac-x64
            file_extensions: '.dmg'
            arch: x64
          - os: macos-latest
            platform: mac-arm64
            artifact_name: mac-arm64
            file_extensions: '.dmg'
            arch: arm64
          - os: ubuntu-latest
            platform: linux
            artifact_name: linux
            file_extensions: '.AppImage'
            arch: x64

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 安装 pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10

      - name: 安装 Rust 工具链
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: 显示发布配置
        run: |
          echo "=== 发布配置信息 ==="
          echo "版本号: ${{ github.event.inputs.version }}"
          echo "是否发布: ${{ github.event.inputs.is-publish }}"
          echo "操作系统: ${{ matrix.os }}"
          echo "平台: ${{ matrix.platform }}"
          echo "=================="

      - name: 提取版本号
        id: version
        shell: bash
        run: |
          # 从手动输入获取版本号
          VERSION=${{ github.event.inputs.version }}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "TAG_VERSION=v$VERSION" >> $GITHUB_OUTPUT
          echo "版本号: $VERSION"
          echo "标签版本: v$VERSION"

      - name: 使用 pnpm version 更新版本号
        run: |
          # 使用 pnpm version 命令更新版本号
          cd apps/desktop && pnpm version ${{ steps.version.outputs.VERSION }} --no-git-tag-version
          echo "已使用 pnpm version 更新版本号为: ${{ steps.version.outputs.VERSION }}"
          # 显示更新后的版本号
          grep '"version"' package.json

      - name: 安装依赖
        run: pnpm install

      - name: 构建 WASM 模块
        run: |
          # 根据平台和架构构建对应的 WASM 模块
          cd packages/wasm

          if [ "${{ matrix.platform }}" = "win" ]; then
            echo "构建 Windows x64 WASM 模块"
            napi build --platform x86_64-pc-windows-msvc --release
          elif [ "${{ matrix.platform }}" = "mac-x64" ]; then
            echo "构建 macOS x64 WASM 模块"
            rustup target add x86_64-apple-darwin
            napi build --platform x86_64-apple-darwin --release
          elif [ "${{ matrix.platform }}" = "mac-arm64" ]; then
            echo "构建 macOS ARM64 WASM 模块"
            rustup target add aarch64-apple-darwin
            napi build --platform aarch64-apple-darwin --release
          elif [ "${{ matrix.platform }}" = "linux" ]; then
            echo "构建 Linux x64 WASM 模块"
            rustup target add x86_64-unknown-linux-gnu
            napi build --platform x86_64-unknown-linux-gnu --release
          fi

          echo "WASM 模块构建完成"

      - name: 验证 WASM 模块 (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Write-Host "检查 WASM 二进制文件:"
          Write-Host "Windows 环境 - 使用 PowerShell 命令:"
          Get-ChildItem -Path packages/wasm -Filter "*.node" -ErrorAction SilentlyContinue | Format-Table Name, Length, LastWriteTime
          Write-Host "WASM 二进制文件列表:"
          Get-ChildItem -Path packages/wasm -Filter "*.node" -Recurse -ErrorAction SilentlyContinue | ForEach-Object { Write-Host "找到: $($_.FullName)" }

      - name: 验证 WASM 模块 (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          echo "检查 WASM 二进制文件:"
          echo "$RUNNER_OS 环境 - 使用 Unix 命令:"
          ls -la packages/wasm/*.node 2>/dev/null || echo "未找到 .node 文件"
          echo "WASM 二进制文件列表:"
          find packages/wasm -name "*.node" -type f
          echo "检查文件架构:"
          for file in packages/wasm/*.node; do
            if [ -f "$file" ]; then
              echo "文件: $file"
              file "$file" || echo "无法检查文件架构"
            fi
          done

      - name: 构建桌面应用
        run: |
          # 根据平台和架构构建对应的桌面应用
          if [ "${{ matrix.platform }}" = "win" ]; then
            echo "构建 Windows x64 桌面应用"
            pnpm run build:desktop
          elif [ "${{ matrix.platform }}" = "mac-x64" ]; then
            echo "构建 macOS x64 桌面应用"
            pnpm run build:desktop -- --config.mac.target.arch=x64
          elif [ "${{ matrix.platform }}" = "mac-arm64" ]; then
            echo "构建 macOS ARM64 桌面应用"
            pnpm run build:desktop -- --config.mac.target.arch=arm64
          elif [ "${{ matrix.platform }}" = "linux" ]; then
            echo "构建 Linux x64 桌面应用"
            pnpm run build:desktop -- --config.linux.target.arch=x64
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: pixuli-desktop-${{ matrix.artifact_name }}-v${{ steps.version.outputs.VERSION }}
          path: |
            apps/desktop/release/*.exe
            apps/desktop/release/*.dmg
            apps/desktop/release/*.AppImage
            !apps/desktop/release/*.blockmap
            !apps/desktop/release/*.yml
            !apps/desktop/release/*.map
          retention-days: 30

  skip-release:
    needs: build-and-release
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.is-publish == 'false' }}
    steps:
      - name: 跳过发布
        run: |
          echo "=== 发布已跳过 ==="
          echo "is-publish 设置为 false，跳过发布相关操作"
          echo "构建产物已上传到 artifacts，可在 Actions 页面下载"
          echo "================"

  prepare-release:
    needs: build-and-release
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.is-publish == 'true' }}
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 提取版本号
        id: version
        shell: bash
        run: |
          # 从 workflow_dispatch 输入获取版本号
          VERSION=${{ github.event.inputs.version }}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "TAG_VERSION=v$VERSION" >> $GITHUB_OUTPUT
          echo "版本号: $VERSION"
          echo "标签版本: v$VERSION"

      - name: 下载所有构建产物
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: 创建发布
        id: create_release
        run: |
          # 检查标签是否已存在
          if gh release view ${{ steps.version.outputs.TAG_VERSION }} >/dev/null 2>&1; then
            echo "标签 ${{ steps.version.outputs.TAG_VERSION }} 已存在，跳过创建"
          else
            # 使用 GitHub CLI 创建发布
            gh release create ${{ steps.version.outputs.TAG_VERSION }} \
              --title "Pixuli Desktop v${{ steps.version.outputs.VERSION }} - 智能图片管理桌面应用" \
              --notes "## 🎉 Pixuli Desktop v${{ steps.version.outputs.VERSION }} 发布

              ### 📦 下载说明
              请根据您的操作系统选择相应的安装包：

              **🪟 Windows 用户**
              - 下载 `win` 版本的 `.exe` 文件进行安装
              - 支持 Windows 10/11 (64位)
              - 推荐使用 Windows 10 1903 或更高版本

              **🍎 macOS 用户**
              - **Intel Mac**: 下载 `mac-x64` 版本的 `.dmg` 文件
              - **Apple Silicon Mac**: 下载 `mac-arm64` 版本的 `.dmg` 文件
              - 支持 macOS 10.15 (Catalina) 或更高版本

              **🐧 Linux 用户**
              - 下载 `linux` 版本的 `.AppImage` 文件
              - 支持主流 Linux 发行版 (Ubuntu, Debian, Fedora, Arch 等)
              - 需要 64位 x86 架构

              ### 🚀 安装指南
              1. 下载对应系统的安装包
              2. 运行安装程序或解压文件
              3. 按照安装向导完成安装
              4. 启动 Pixuli Desktop 开始使用

              ### 💻 系统要求
              - **Windows**: Windows 10/11 (64位), 4GB RAM, 2GB 可用磁盘空间
              - **macOS**: macOS 10.15+, 4GB RAM, 2GB 可用磁盘空间
              - **Linux**: 主流 Linux 发行版, 4GB RAM, 2GB 可用磁盘空间
              - **处理器**: Intel/AMD 64位处理器或 Apple Silicon (M1/M2)

              ### ✨ 桌面应用特性
              - ✅ 完整的本地文件系统访问
              - ✅ 原生性能优化
              - ✅ 系统集成和通知
              - ✅ 离线功能支持
              - ✅ 多窗口管理
              - ✅ 键盘快捷键

              ### 📋 更新日志
              - 版本: v${{ steps.version.outputs.VERSION }}
              - 构建时间: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
              - 提交: ${{ github.sha }}
              - 分支: ${{ github.ref_name }}

              ### 🔗 相关链接
              - 📖 [使用文档](https://github.com/trueLoving/Pixuli/wiki)
              - 🐛 [问题反馈](https://github.com/trueLoving/Pixuli/issues)
              - 💬 [讨论区](https://github.com/trueLoving/Pixuli/discussions)

              ---
              *感谢您使用 Pixuli Desktop！如有问题或建议，欢迎在 GitHub 上反馈。*" \
              --draft=false \
              --prerelease=false
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 上传 Windows 构建产物
        run: |
          # 查找 Windows 构建产物
          find artifacts/pixuli-desktop-win-v${{ steps.version.outputs.VERSION }} -name "*.exe" -type f | while read file; do
            echo "上传文件: $file"
            gh release upload ${{ steps.version.outputs.TAG_VERSION }} "$file" --clobber
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 上传 macOS DMG 包
        run: |
          # 查找 macOS DMG 构建产物
          find artifacts/pixuli-desktop-mac-x64-v${{ steps.version.outputs.VERSION }} -name "*.dmg" -type f | while read file; do
            echo "上传 macOS x64 文件: $file"
            gh release upload ${{ steps.version.outputs.TAG_VERSION }} "$file" --clobber
          done
          find artifacts/pixuli-desktop-mac-arm64-v${{ steps.version.outputs.VERSION }} -name "*.dmg" -type f | while read file; do
            echo "上传 macOS ARM64 文件: $file"
            gh release upload ${{ steps.version.outputs.TAG_VERSION }} "$file" --clobber
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 上传 Linux AppImage 包
        run: |
          # 查找 Linux AppImage 构建产物
          find artifacts/pixuli-desktop-linux-v${{ steps.version.outputs.VERSION }} -name "*.AppImage" -type f | while read file; do
            echo "上传 Linux 文件: $file"
            gh release upload ${{ steps.version.outputs.TAG_VERSION }} "$file" --clobber
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-version-and-publish:
    needs: [build-and-release, prepare-release]
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.is-publish == 'true' }}
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 提取版本号
        id: version
        shell: bash
        run: |
          # 从 workflow_dispatch 输入获取版本号
          VERSION=${{ github.event.inputs.version }}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "TAG_VERSION=v$VERSION" >> $GITHUB_OUTPUT
          echo "版本号: $VERSION"
          echo "标签版本: v$VERSION"

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 安装 pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10

      - name: 拉取远程更改
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git pull origin main --rebase

      - name: 使用 pnpm version 更新版本号
        run: |
          # 使用 pnpm version 命令更新版本号
          pnpm version ${{ steps.version.outputs.VERSION }} --no-git-tag-version
          echo "已使用 pnpm version 更新版本号为: ${{ steps.version.outputs.VERSION }}"
          # 显示更新后的版本号
          grep '"version"' package.json

      - name: 提交版本号更新
        run: |
          # 检查是否有变更需要提交
          if git diff --quiet package.json; then
            echo "package.json 没有变更，跳过提交"
          else
            git add package.json
            git commit -m "chore: bump version to ${{ steps.version.outputs.VERSION }}"
            git push origin main
            echo "版本号更新已提交并推送"
          fi
